# .\combined_script.py


# .\manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pdf_processor.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?\n"
            "Did you forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

# .\core\admin.py
from django.contrib import admin

# Register your models here.


# .\core\apps.py
from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "core"


# .\core\forms.py
# core/forms.py
from django import forms
from .models import ProcessingJob

class ProcessingForm(forms.ModelForm):
    pdf_file = forms.FileField(
        widget=forms.ClearableFileInput(attrs={'accept': '.pdf'}),
        help_text='Select a PDF file'
    )
    
    class Meta:
        model = ProcessingJob
        fields = ['name', 'prompt']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Enter a name for this processing job'
            }),
            'prompt': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 5,
                'placeholder': 'Enter your prompt here'
            })
        }

    def clean_pdf_file(self):
        file = self.cleaned_data['pdf_file']
        if not file.name.endswith('.pdf'):
            raise forms.ValidationError('Only PDF files are allowed.')
        return file

# .\core\models.py
# core/models.py
from django.db import models

class ProcessingJob(models.Model):
    name = models.CharField(max_length=200)
    prompt = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(
        max_length=20,
        choices=[
            ('pending', 'Pending'),
            ('processing', 'Processing'),
            ('completed', 'Completed'),
            ('failed', 'Failed')
        ],
        default='pending'
    )

    def __str__(self):
        return self.name

class PDFDocument(models.Model):
    job = models.OneToOneField(ProcessingJob, on_delete=models.CASCADE, related_name='document')
    file = models.FileField(upload_to='pdfs/')
    processed = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.job.name} - {self.file.name}"

class ProcessingResult(models.Model):
    document = models.OneToOneField(PDFDocument, on_delete=models.CASCADE, related_name='result')
    result_data = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Result for {self.document}"

# .\core\urls.py
# core/urls.py
from django.urls import path
from . import views

app_name = 'core'

urlpatterns = [
    path('', views.ProcessorView.as_view(), name='home'),
    path('process/', views.ProcessorView.as_view(), name='processor'),
    path('test-api/', views.test_gemini, name='test_api'),
    path('results/<int:job_id>/', views.ResultsView.as_view(), name='results'),
    path('debug/', views.debug_view, name='debug'),
]
   

# .\core\views.py
# core/views.py
from django.views.generic import FormView, TemplateView
from django.http import JsonResponse, HttpResponse
from django.conf import settings
import google.generativeai as genai
import logging
from .forms import ProcessingForm
from .models import ProcessingJob, PDFDocument, ProcessingResult

# Set up logging
logger = logging.getLogger(__name__)

class ProcessorView(FormView):
    template_name = 'processor.html'
    form_class = ProcessingForm
    success_url = '/'

    def form_valid(self, form):
        try:
            logger.info("Starting form processing")
            
            # Save the processing job
            job = form.save()
            logger.debug(f"Created job with ID: {job.id}")
            
            # Save the PDF file
            pdf_doc = PDFDocument.objects.create(
                job=job,
                file=self.request.FILES['pdf_file']
            )
            logger.debug(f"Saved PDF document: {pdf_doc.file.name}")

            # Configure Gemini
            genai.configure(api_key=settings.GEMINI_API_KEY)
            model = genai.GenerativeModel('gemini-1.5-pro')
            logger.debug("Configured Gemini API")
            
            # Process with Gemini
            gemini_response = model.generate_content([
                pdf_doc.file,
                job.prompt
            ])
            logger.info("Successfully processed PDF with Gemini")
            
            # Save the results
            result = ProcessingResult.objects.create(
                document=pdf_doc,
                result_data=gemini_response.text
            )
            logger.debug(f"Saved processing result with ID: {result.id}")
            
            return JsonResponse({
                'success': True,
                'result': gemini_response.text,
                'job_id': job.id
            })
            
        except KeyError as e:
            logger.error(f"Missing required field: {str(e)}")
            return JsonResponse({
                'success': False,
                'error': f"Missing required field: {str(e)}"
            }, status=400)
            
        except Exception as e:
            logger.error(f"Error processing form: {str(e)}", exc_info=True)
            if 'job' in locals():
                job.status = 'failed'
                job.save()
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)

def test_gemini(request):
    """Test view for Gemini API connection"""
    try:
        logger.info("Testing Gemini API connection")
        genai.configure(api_key=settings.GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-pro')
        
        test_response = model.generate_content("What model are you running and why is the sky blue?")
        logger.info("Gemini API test successful")
        
        return JsonResponse({
            'success': True,
            'response': test_response.text
        })
    except Exception as e:
        logger.error(f"Gemini API test failed: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

class ResultsView(TemplateView):
    template_name = 'results.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        job_id = self.kwargs.get('job_id')
        
        try:
            job = ProcessingJob.objects.get(id=job_id)
            result = ProcessingResult.objects.get(document__job=job)
            context.update({
                'job': job,
                'result': result
            })
            logger.info(f"Retrieved results for job ID: {job_id}")
        except (ProcessingJob.DoesNotExist, ProcessingResult.DoesNotExist) as e:
            logger.warning(f"Results not found for job ID: {job_id}")
            context['error'] = 'Results not found'
        except Exception as e:
            logger.error(f"Error retrieving results: {str(e)}", exc_info=True)
            context['error'] = 'An error occurred while retrieving results'
        
        return context

def debug_view(request):
    """Debug view to test logging and basic functionality"""
    try:
        logger.debug("Debug message")
        logger.info("Info message")
        logger.warning("Warning message")
        
        # Test Gemini configuration
        api_key = settings.GEMINI_API_KEY
        logger.info(f"API Key configured: {'GEMINI_API_KEY' in dir(settings)}")
        
        return JsonResponse({
            'success': True,
            'message': "Debug view executed successfully"
        })
    except Exception as e:
        logger.error(f"Error in debug view: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)

# .\core\__init__.py


# .\core\migrations\0001_initial.py
# Generated by Django 5.1.2 on 2024-10-26 21:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ProcessingJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("prompt", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PDFDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="pdfs/")),
                ("processed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "job",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="document",
                        to="core.processingjob",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProcessingResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("result_data", models.JSONField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="result",
                        to="core.pdfdocument",
                    ),
                ),
            ],
        ),
    ]


# .\core\migrations\__init__.py


# .\core\services\llm_service.py


# .\core\services\pdf_service.py


# .\core\services\__init__.py


# .\pdf_processor\asgi.py
# pdf_processor/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pdf_processor.settings')

application = get_asgi_application()

# .\pdf_processor\settings.py
# pdf_processor/settings.py
import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'your-default-secret-key-for-development')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pdf_processor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pdf_processor.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'core' / 'static']

# Media files
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Gemini API Configuration
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# Add this to your existing settings
DEFAULT_PROMPT = """You are a medical reviewer tasked with extracting specific information..."""

# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# .\pdf_processor\urls.py
# pdf_processor/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls', namespace='core')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# .\pdf_processor\wsgi.py
# pdf_processor/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pdf_processor.settings')

application = get_wsgi_application()

# .\pdf_processor\__init__.py


